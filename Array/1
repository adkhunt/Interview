#ifndef MIN_HEAP
#define MIN_HEAP

typedef struct HEAP_NODE{
				int element;
				int cur_row,next_col;
} heap_node;

typedef struct HEAP{
			int limit;
			heap_node *heap_array;
} heap;

heap* create_heap(int limit)
{
	heap *temp = (heap*) malloc(sizeof(heap));

	temp->limit = limit;
	temp->heap_array = (heap_node*) malloc(sizeof(heap_node)*limit);

	return temp;
}

void swap(heap_node *a, heap_node *b)
{
	heap_node temp = *a;
	*a = *b;
	*b = temp;
}

void min_heapify(heap *arr, int parent)
{
	int left_child = (parent * 2) + 1;
	int right_child = (parent * 2) + 2;
	int min = parent;

	if(left_child < arr->limit && 
		arr->heap_array[left_child].element < arr->heap_array[min].element)
		min = left_child;

	if(right_child < arr->limit &&
		arr->heap_array[right_child].element < arr->heap_array[min].element)
		min = right_child;

	if(min != parent)
	{
		swap(&(arr->heap_array[min]) , &(arr->heap_array[parent]));
		min_heapify(arr, min);
	}
}

void print_heap(heap *arr)
{
int i;

	for(i = 0 ; i < arr->limit ; ++i)
	{
		heap_node root = arr->heap_array[0];
		printf("elem = %d, row = %d, next_col = %d\n",root.element,root.cur_row,root.next_col);
	}

	printf("\n");
}

void build_heap(heap *arr)
{
int i = (arr->limit - 1) / 2;

	for(i ; i >= 0 ; --i)
		min_heapify(arr, i);
}

#endif
